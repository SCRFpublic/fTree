// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// loadVars
double loadVars(arma::mat X, arma::mat Y, arma::mat V, arma::mat D, int nPredictors, int cType, int mSplit, int mBucket, double cp);
RcppExport SEXP fTree_loadVars(SEXP XSEXP, SEXP YSEXP, SEXP VSEXP, SEXP DSEXP, SEXP nPredictorsSEXP, SEXP cTypeSEXP, SEXP mSplitSEXP, SEXP mBucketSEXP, SEXP cpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< int >::type nPredictors(nPredictorsSEXP);
    Rcpp::traits::input_parameter< int >::type cType(cTypeSEXP);
    Rcpp::traits::input_parameter< int >::type mSplit(mSplitSEXP);
    Rcpp::traits::input_parameter< int >::type mBucket(mBucketSEXP);
    Rcpp::traits::input_parameter< double >::type cp(cpSEXP);
    rcpp_result_gen = Rcpp::wrap(loadVars(X, Y, V, D, nPredictors, cType, mSplit, mBucket, cp));
    return rcpp_result_gen;
END_RCPP
}
// unloadVars
void unloadVars();
RcppExport SEXP fTree_unloadVars() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    unloadVars();
    return R_NilValue;
END_RCPP
}
// findOneBestContinuousSplit
List findOneBestContinuousSplit(arma::uvec INDEX, int pIndex);
RcppExport SEXP fTree_findOneBestContinuousSplit(SEXP INDEXSEXP, SEXP pIndexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type INDEX(INDEXSEXP);
    Rcpp::traits::input_parameter< int >::type pIndex(pIndexSEXP);
    rcpp_result_gen = Rcpp::wrap(findOneBestContinuousSplit(INDEX, pIndex));
    return rcpp_result_gen;
END_RCPP
}
// findOneBestCategoricalSplit
List findOneBestCategoricalSplit(arma::uvec INDEX, int pIndex);
RcppExport SEXP fTree_findOneBestCategoricalSplit(SEXP INDEXSEXP, SEXP pIndexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type INDEX(INDEXSEXP);
    Rcpp::traits::input_parameter< int >::type pIndex(pIndexSEXP);
    rcpp_result_gen = Rcpp::wrap(findOneBestCategoricalSplit(INDEX, pIndex));
    return rcpp_result_gen;
END_RCPP
}
// findAllBestSplits
List findAllBestSplits(arma::uvec INDEX, double currentGoodness);
RcppExport SEXP fTree_findAllBestSplits(SEXP INDEXSEXP, SEXP currentGoodnessSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type INDEX(INDEXSEXP);
    Rcpp::traits::input_parameter< double >::type currentGoodness(currentGoodnessSEXP);
    rcpp_result_gen = Rcpp::wrap(findAllBestSplits(INDEX, currentGoodness));
    return rcpp_result_gen;
END_RCPP
}
// fTreeRPart
List fTreeRPart(arma::uvec INDEX, double currentGoodness, int depth);
RcppExport SEXP fTree_fTreeRPart(SEXP INDEXSEXP, SEXP currentGoodnessSEXP, SEXP depthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type INDEX(INDEXSEXP);
    Rcpp::traits::input_parameter< double >::type currentGoodness(currentGoodnessSEXP);
    Rcpp::traits::input_parameter< int >::type depth(depthSEXP);
    rcpp_result_gen = Rcpp::wrap(fTreeRPart(INDEX, currentGoodness, depth));
    return rcpp_result_gen;
END_RCPP
}
// fTreeBootstrap
List fTreeBootstrap(arma::mat BOOTINDEX);
RcppExport SEXP fTree_fTreeBootstrap(SEXP BOOTINDEXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type BOOTINDEX(BOOTINDEXSEXP);
    rcpp_result_gen = Rcpp::wrap(fTreeBootstrap(BOOTINDEX));
    return rcpp_result_gen;
END_RCPP
}
// computeGoodness
double computeGoodness(arma::uvec INDEX);
RcppExport SEXP fTree_computeGoodness(SEXP INDEXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type INDEX(INDEXSEXP);
    rcpp_result_gen = Rcpp::wrap(computeGoodness(INDEX));
    return rcpp_result_gen;
END_RCPP
}
// sseCost
double sseCost(arma::uvec INDEX);
RcppExport SEXP fTree_sseCost(SEXP INDEXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type INDEX(INDEXSEXP);
    rcpp_result_gen = Rcpp::wrap(sseCost(INDEX));
    return rcpp_result_gen;
END_RCPP
}
// mahalanobisCost
double mahalanobisCost(arma::uvec INDEX);
RcppExport SEXP fTree_mahalanobisCost(SEXP INDEXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type INDEX(INDEXSEXP);
    rcpp_result_gen = Rcpp::wrap(mahalanobisCost(INDEX));
    return rcpp_result_gen;
END_RCPP
}
// l2Cost
double l2Cost(arma::uvec INDEX);
RcppExport SEXP fTree_l2Cost(SEXP INDEXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type INDEX(INDEXSEXP);
    rcpp_result_gen = Rcpp::wrap(l2Cost(INDEX));
    return rcpp_result_gen;
END_RCPP
}
// wssCost
double wssCost(arma::uvec INDEX);
RcppExport SEXP fTree_wssCost(SEXP INDEXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type INDEX(INDEXSEXP);
    rcpp_result_gen = Rcpp::wrap(wssCost(INDEX));
    return rcpp_result_gen;
END_RCPP
}
// rdsCost
double rdsCost(arma::uvec INDEX);
RcppExport SEXP fTree_rdsCost(SEXP INDEXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type INDEX(INDEXSEXP);
    rcpp_result_gen = Rcpp::wrap(rdsCost(INDEX));
    return rcpp_result_gen;
END_RCPP
}
// getAllCombinations
arma::mat getAllCombinations(int N);
RcppExport SEXP fTree_getAllCombinations(SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(getAllCombinations(N));
    return rcpp_result_gen;
END_RCPP
}
// combToString
std::string combToString(arma::vec combination);
RcppExport SEXP fTree_combToString(SEXP combinationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type combination(combinationSEXP);
    rcpp_result_gen = Rcpp::wrap(combToString(combination));
    return rcpp_result_gen;
END_RCPP
}
// getCombinIndices
arma::uvec getCombinIndices(arma::vec Xcov, arma::vec Combination, bool lr);
RcppExport SEXP fTree_getCombinIndices(SEXP XcovSEXP, SEXP CombinationSEXP, SEXP lrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Xcov(XcovSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Combination(CombinationSEXP);
    Rcpp::traits::input_parameter< bool >::type lr(lrSEXP);
    rcpp_result_gen = Rcpp::wrap(getCombinIndices(Xcov, Combination, lr));
    return rcpp_result_gen;
END_RCPP
}
